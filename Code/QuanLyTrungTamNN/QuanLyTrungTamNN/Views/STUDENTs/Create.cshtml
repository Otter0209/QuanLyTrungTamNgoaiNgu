@model QuanLyTrungTamNN.ViewModels.StudentParentViewModel
@{
    ViewBag.Title = "Thêm mới Học viên & Phụ huynh";
}

<div class="container mt-4">
    <div class="card shadow-lg border-0">
        <div class="card-header bg-primary text-white text-center">
            <h3 class="mb-0"><i class="fas fa-user-plus"></i> Thêm mới Học viên</h3>
        </div>
        <div class="card-body">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                <div class="row">
                    <!-- Thông tin Học viên -->
                    <div class="col-md-6">
                        <h4 class="text-primary"><i class="fas fa-user"></i> Thông tin Học viên</h4>
                        <hr />
                        <div class="form-group">
                            @Html.LabelFor(m => m.FullName, new { @class = "font-weight-bold" })
                            @Html.TextBoxFor(m => m.FullName, new { @class = "form-control", placeholder = "Nhập họ và tên..." })
                            @Html.ValidationMessageFor(m => m.FullName, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.Email, new { @class = "font-weight-bold" })
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Nhập email..." })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.PhoneNumber, new { @class = "font-weight-bold" })
                            @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control", placeholder = "Nhập số điện thoại..." })
                            @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.DateOfBirth, new { @class = "font-weight-bold" })
                            @Html.TextBoxFor(m => m.DateOfBirth, new { @class = "form-control", @type = "date", id = "DateOfBirth" })
                            <div class="alert alert-warning mt-2 d-none" id="ageAlert">
                                <i class="fas fa-exclamation-triangle"></i> Học viên phải từ 6 tuổi trở lên.
                            </div>
                            @Html.ValidationMessageFor(m => m.DateOfBirth, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.Address, new { @class = "font-weight-bold" })
                            @Html.TextBoxFor(m => m.Address, new { @class = "form-control", placeholder = "Nhập địa chỉ..." })
                            @Html.ValidationMessageFor(m => m.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <!-- Thông tin Phụ huynh -->
                    <div class="col-md-6">
                        <h4 class="text-success"><i class="fas fa-user-friends"></i> Thông tin Phụ huynh</h4>
                        <hr />
                        <div class="form-group">
                            @Html.LabelFor(m => m.ParentFullName, new { @class = "font-weight-bold" })
                            @Html.TextBoxFor(m => m.ParentFullName, new { @class = "form-control", placeholder = "Nhập họ và tên phụ huynh..." })
                            @Html.ValidationMessageFor(m => m.ParentFullName, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.ParentPhone, new { @class = "font-weight-bold" })
                            @Html.TextBoxFor(m => m.ParentPhone, new { @class = "form-control", placeholder = "Nhập số điện thoại phụ huynh..." })
                            @Html.ValidationMessageFor(m => m.ParentPhone, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.ParentEmail, new { @class = "font-weight-bold" })
                            @Html.TextBoxFor(m => m.ParentEmail, new { @class = "form-control", placeholder = "Nhập email phụ huynh..." })
                            @Html.ValidationMessageFor(m => m.ParentEmail, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.ParentAddress, new { @class = "font-weight-bold" })
                            @Html.TextBoxFor(m => m.ParentAddress, new { @class = "form-control", placeholder = "Nhập địa chỉ phụ huynh..." })
                            @Html.ValidationMessageFor(m => m.ParentAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="text-center mt-4">
                    <button type="submit" class="btn btn-primary mx-2">
                        <i class="fas fa-save"></i> Thêm mới
                    </button>
                    @Html.ActionLink("⬅️ Quay lại", "Index", null, new { @class = "btn btn-secondary mx-2" })
                </div>
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let dateInput = document.getElementById("DateOfBirth");
        let ageAlert = document.getElementById("ageAlert");

        if (dateInput) {
            dateInput.addEventListener("change", function () {
                let dob = new Date(this.value);
                let today = new Date();
                let age = today.getFullYear() - dob.getFullYear();

                let monthDiff = today.getMonth() - dob.getMonth();
                if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) {
                    age--;
                }

                if (age < 6) {
                    ageAlert.classList.remove("d-none");
                    this.value = "";
                } else {
                    ageAlert.classList.add("d-none");
                }
            });
        }
    });
</script>
